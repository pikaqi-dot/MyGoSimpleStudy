package main

import (
	"fmt"
	"time"
)

func add(a, b int) {
	var c = a + b
	fmt.Printf("%d + %d = %d\n", a, b, c)
}

func main() {
	go add(1, 2)
	time.Sleep(1e9)
}
//如果要显示出子协程的打印结果，一种方式是在主协程中等待足够长的时间再退出，以便保证子协程中的所有代码执行完毕：
//这里，我们通过 time.Sleep(1e9) 让主协程等待 1s 后退出，这样，运行 go run xxx.go 就可以看到打印结果了：
//不过，这种方式过于简单粗暴，对于加法运算，1s 肯定够了（而且根本不需要这么长时间），但是如果是数据库连接、发送邮件
//之类的难以预估时间的操作呢？这种方式就不合适了，我们需要一种更精准的方式在子协程执行完毕后，立即退出主协程，这就涉及到
//协程间的通信，我们将在下一篇教程中重点讨论这一块，并且通过协程间通信来重写这段代码